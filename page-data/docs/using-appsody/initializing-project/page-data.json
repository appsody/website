{"componentChunkName":"component---src-templates-doc-template-js","path":"/docs/using-appsody/initializing-project/","webpackCompilationHash":"cf8327ce932cb6a0eac2","result":{"data":{"markdownRemark":{"html":"<h1 id=\"initializing-appsody-projects\"><a href=\"#initializing-appsody-projects\" aria-label=\"initializing appsody projects permalink\" class=\"header-link-icon\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initializing Appsody Projects</h1>\n<p>The easiest way to initialize an Appsody project is to start a new source code project from a stack template. However, you can also configure an existing source code project to use an appropriate Appsody stack.</p>\n<h2 id=\"creating-a-new-project\"><a href=\"#creating-a-new-project\" aria-label=\"creating a new project permalink\" class=\"header-link-icon\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a new project</h2>\n<p>The first step to creating a new project is to create an empty directory and give your project a name. You might want to place the project directory next to your other source code projects or your IDE workspace. For example:</p>\n<pre><code>cd /path/to/your/project/workspace\nmkdir my-project\ncd my-project\n</code></pre>\n<p>Alternatively, you could clone an empty Git repository or create an empty project in an IDE, then navigate to that directory in the terminal. Appsody is tolerant of some hidden files in the project directory, such as .git, .project, or .settings files. The <code>appsody init &#x3C;repo>/&#x3C;stack> &#x3C;template></code> command won't overwrite files without the <code>--overwrite</code> option.</p>\n<p>Next, choose a stack. Use <code>appsody list</code> to view the available stacks.</p>\n<p>Here is an example of the output produced by the <code>appsody list</code> command:</p>\n<pre><code>$ appsody list\n\nREPO            ID                          VERSION     TEMPLATES           DESCRIPTION\nincubator       java-openliberty            0.2.2       *default            Open Liberty &#x26; OpenJ9 using Maven          \nincubator       java-spring-boot2           0.3.26      *default, kotlin    Spring Boot using OpenJ9 and Maven\nincubator       nodejs                      0.3.4       *simple             Runtime for Node.js applications\nincubator       nodejs-express              0.4.4       *simple, scaffold   Express web framework for Node.js\nincubator       swift                       0.2.5       *simple             Runtime for Swift applications\nexperimental    java-spring-boot2-liberty   0.1.11      *default            Spring Boot using OpenJ9, Maven and OpenLiberty\nexperimental    nodejs-functions            0.2.0       *simple             Serverless runtime for Node.js functions\nexperimental    quarkus                     0.2.3       *default            Quarkus runtime for running Java applications\n</code></pre>\n<p>You can limit the <code>appsody list</code> output by specifying a <code>repository name</code> as shown below:</p>\n<pre><code>$ appsody list incubator\n\nREPO          ID                     VERSION    TEMPLATES           DESCRIPTION\nincubator     java-openliberty       0.2.2      *default            Open Liberty &#x26; OpenJ9 using Maven          \nincubator     java-spring-boot2      0.3.26     *default, kotlin    Spring Boot using OpenJ9 and Maven\nincubator     nodejs                 0.3.4      *simple             Runtime for Node.js applications\nincubator     nodejs-express         0.4.4      *simple, scaffold   Express web framework for Node.js\nincubator     swift                  0.2.5      *simple             Runtime for Swift applications\n</code></pre>\n<p>When you have chosen your stack, run <code>appsody init &#x3C;repository-name>/&#x3C;stack> &#x3C;template></code> for the repository and stack of your choice. This command downloads the default project template for the stack and initializes Appsody for local development.  If you elect to only specify the stack, e.g. <code>appsody init &#x3C;stack></code>, the default repository is assumed.  If you do not specify a template, the default template is assumed.</p>\n<p>You can specify an <code>application-name:</code> field in the Appsody configuration file <code>.appsody-config.yaml</code> by using the <code>--application-name</code> flag. The Appsody configuration file does not contain an application name entry by default. If added, this field is used by downstream tools such as the Appsody Operator.</p>\n<p>You can specify the <code>--stack-registry</code> flag to override the default registry URL that hosts your stack images, from the default value “docker.io”. Subsequent calls to Appsody CLI commands, such as <code>appsody run</code>, then use this registry URL.</p>\n<p>Now you have a fully functional Appsody project. For more details on running the project, see <a href=\"/docs/using-appsody/local-development\">Local Development</a>.</p>\n<h2 id=\"configuring-an-existing-project\"><a href=\"#configuring-an-existing-project\" aria-label=\"configuring an existing project permalink\" class=\"header-link-icon\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring an existing project</h2>\n<p>You can configure an existing project to use Appsody, which typically involves adjusting the project structure.</p>\n<p>First, choose a stack that closely resembles your existing project. Use <code>appsody list</code> to view the available stacks, and review the <a href=\"https://github.com/appsody/stacks/tree/master/incubator\">documentation</a> for the appropriate stack.</p>\n<p>Next, from your project directory, run <code>appsody init &#x3C;stack> none</code> to initialize Appsody without using a template on the existing project.</p>\n<p>You might need to update the structure of your project so that the stack can find and run your code. Because each stack has a different structure, refer to the documentation for your stack and review the project template for guidance.</p>\n<p>When you have updated the project structure, start the development container to verify that it is working with <code>appsody run</code>. For more details on running the project, see <a href=\"/docs/using-appsody/local-development\">Local Development</a>.</p>","frontmatter":{"title":"Initializing Appsody Projects"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"pagePath":"/docs/using-appsody/initializing-project/"}}}