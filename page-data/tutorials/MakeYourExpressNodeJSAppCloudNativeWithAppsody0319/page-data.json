{"componentChunkName":"component---src-templates-tutorial-template-js","path":"/tutorials/MakeYourExpressNodeJSAppCloudNativeWithAppsody0319/","webpackCompilationHash":"cf8327ce932cb6a0eac2","result":{"data":{"markdownRemark":{"html":"<h1 id=\"make-your-expressjs-app-cloud-native-with-appsody\"><a href=\"#make-your-expressjs-app-cloud-native-with-appsody\" aria-label=\"make your expressjs app cloud native with appsody permalink\" class=\"header-link-icon\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Make your Express.js app Cloud-Native with Appsody</h1>\n<p>This tutorial shows you how to take an existing Express.js application, and make it cloud-native, by enabling it to work with the <code>nodejs-express</code> Appsody Stack.</p>\n<h2 id=\"prerequisites\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"header-link-icon\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<p>To follow this tutorial, you need to install both the Appsody CLI and Docker. You also need the Express.js application that you want to make cloud-native by using Appsody.</p>\n<h3 id=\"install-the-appsody-cli\"><a href=\"#install-the-appsody-cli\" aria-label=\"install the appsody cli permalink\" class=\"header-link-icon\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install the Appsody CLI</h3>\n<p>Install the Appsody CLI by following the <a href=\"https://appsody.dev/docs/getting-started/installation\">Installing Appsody</a> guide for your platform.</p>\n<h2 id=\"create-an-expressjs-application\"><a href=\"#create-an-expressjs-application\" aria-label=\"create an expressjs application permalink\" class=\"header-link-icon\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create an Express.js application</h2>\n<p>You can either use an Express.js app that you already have, or create a sample Express.js app by using the <a href=\"http://expressjs.com/en/starter/generator.html\">Express.js Application Generator</a>. The examples within the tutorial assume that you are using the Express.js Application Generator as follows:</p>\n<ol>\n<li>\n<p>Install the Express.js Application Generator:</p>\n<pre><code>npm install -g express-generator\n</code></pre>\n</li>\n<li>\n<p>Create a directory for your application:</p>\n<pre><code>mkdir expressjs-app\ncd expressjs-app\n</code></pre>\n</li>\n<li>\n<p>Run the Express Application Generator to build a sample application:</p>\n<pre><code>express\n</code></pre>\n</li>\n</ol>\n<h2 id=\"enabling-your-expressjs-application-with-the-nodejs-express-appsody-stack\"><a href=\"#enabling-your-expressjs-application-with-the-nodejs-express-appsody-stack\" aria-label=\"enabling your expressjs application with the nodejs express appsody stack permalink\" class=\"header-link-icon\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enabling your Express.js application with the <code>nodejs-express</code> Appsody Stack</h2>\n<p>New Appsody based applications are created by using <code>appsody init &#x3C;stack> &#x3C;template></code>, where the stack is chosen by you from the stacks that are listed when you run <code>appsody list</code>. The <code>init</code> command downloads the most recent copy of the Appsody Stack, and populates the project directory with a template that provides a basic project structure.</p>\n<p>The Express.js Appsody stack provides <a href=\"https://github.com/appsody/stacks/tree/master/incubator/nodejs-express#templates\">two templates: simple and scaffold</a>. Simple, the default template, provides a basic Express app. The scaffold template has more boilerplate.</p>\n<p>To enable an existing application with a stack, use the <code>appsody init</code> command, but pass <code>none</code> as the template. A template value of <code>none</code> indicates that a project structure (or template) is not required.</p>\n<ol>\n<li>\n<p>Enable the Express.js Application:</p>\n<pre><code>appsody init nodejs-express none\n</code></pre>\n<p>This provides output similar to the following:</p>\n<pre><code>Checking stack requirements...\nDocker requirements met\nAppsody requirements met\nRunning appsody init...\nDownloading nodejs-express template project from https://github.com/appsody/stacks/releases/download/nodejs-express-v0.4.6/incubator.nodejs-express.v0.4.6.templates.simple.tar.gz\nDownload complete. Do not unzip the template project. Only extracting .appsody-config.yaml file from /Users/helenmasters/expressjs-app/nodejs-express.tar.gz\nSetting up the development environment\nYour Appsody project name has been set to expressjs-app\nPulling docker image docker.io/appsody/nodejs-express:0.4\nRunning command: docker pull docker.io/appsody/nodejs-express:0.4\n0.4: Pulling from appsody/nodejs-express\nDigest: sha256:14828ecbd226c9869761a4991911c407465c754e54b5a988c4daa933b6adf4ae\nStatus: Image is up to date for appsody/nodejs-express:0.4\ndocker.io/appsody/nodejs-express:0.4\nRunning command: docker run --rm --entrypoint /bin/bash docker.io/appsody/nodejs-express:0.4 -c \"find /project -type f -name .appsody-init.sh\"\nSuccessfully initialized Appsody project with the nodejs-express stack and no template.\n</code></pre>\n<p>As well as downloading the latest version of the Appsody Stack (in this case version 0.4), this has added a <code>.appsody-config.yaml</code> file to the project, which configures the versions of the Stack that the project uses.</p>\n<p>While your application is now enabled to use the <code>nodejs-express</code> stack, there are three additional steps that are required to ensure that the Express.js application works properly with the stack.</p>\n</li>\n<li>\n<p>Modify the <code>package.json</code> file so that it has a main entry that references the file that contains your Express.js application.</p>\n<p>In the case of the application created by the Express Application Generator, the <code>package.json</code> becomes:</p>\n<pre><code>{\n  “name”: “expressjs-app”,\n  “version”: “0.0.0”,\n  “private”: true,\n  “main”: “app.js”,\n  “scripts”: {\n    “start”: “node ./bin/www”\n  },\n  “dependencies”: {\n    “cookie-parser”: “~1.4.4”,\n    “debug”: “~2.6.9”,\n    “express”: “~4.16.1”,\n    “http-errors”: “~1.6.3”,\n    “jade”: “~1.11.0”,\n    “morgan”: “~1.9.1”\n  }\n}\n</code></pre>\n<p>Here main references <code>app.js</code> as that is the file that contains the Express.js application. The next step is to export the function that returns the Express router or application from the file.</p>\n</li>\n<li>\n<p>The <code>nodejs-express</code> stack requires you to export a function that returns your Express router or application.</p>\n<p>To enable this, the last line of the <code>app.js</code> file becomes:</p>\n<pre><code>module.exports = () => app;\n</code></pre>\n<p>This exports the function so that the <code>nodejs-express</code> Appsody stack can apply it onto its own pre-configured Express.js server that includes the cloud-native capabilities.</p>\n</li>\n<li>\n<p>Remove any default routes (e.g. for 404: Not Found):</p>\n<p>The <code>nodejs-express</code> stack contains default implementations of Health, Readiness, and Liveness endpoints. These endpoints are able to be overridden by your application. This means that any default route handlers override these routes.</p>\n<p>In the application created by the Express Application Generator, this means removing the following statement:</p>\n<pre><code>// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n</code></pre>\n</li>\n</ol>\n<p>At this point, your application has been fully enabled. This means that you can now run, test, and debug your application in a continuous containerized environment provided by the Appsody Stack. You also get the following additional capabilities, which have been inherited from the stack:</p>\n<ul>\n<li>Health Endpoint: <a href=\"http://localhost:3000/health\">http://localhost:3000/health</a></li>\n<li>Liveness Endpoint: <a href=\"http://localhost:3000/live\">http://localhost:3000/live</a></li>\n<li>Readiness Endpoint: <a href=\"http://localhost:3000/ready\">http://localhost:3000/ready</a></li>\n<li>Metrics Endpoint: <a href=\"http://localhost:3000/metrics\">http://localhost:3000/metrics</a></li>\n<li>Performance Dashboard: <a href=\"http://localhost:3000/appmetrics-dash\">http://localhost:3000/appmetrics-dash</a></li>\n</ul>\n<p>You can also use the <code>appsody build</code> command to build your app into a optimized container image, and the <code>appsody deploy</code> command to deploy it to Kubernetes.</p>\n<h2 id=\"next-steps\"><a href=\"#next-steps\" aria-label=\"next steps permalink\" class=\"header-link-icon\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next Steps</h2>\n<p>For more information on <a href=\"https://appsody.dev\">Appsody</a>, join us on <a href=\"http://appsody-slack.eu-gb.mybluemix.net\">Slack</a>, follow us on <a href=\"https://twitter.com/appsodydev\">Twitter</a> and star us on <a href=\"https://github.com/appsody\">GitHub</a>.</p>","frontmatter":{"title":"Make your Express.js app Cloud-Native with Appsody"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"pagePath":"/tutorials/MakeYourExpressNodeJSAppCloudNativeWithAppsody0319/"}}}